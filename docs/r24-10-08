r24-09-08

-1. readmeを作成

-2. 要件定義

1. 概要

「Ra」は、複数のブロックチェーンをリアルタイムで反射するシステムであり、ユーザーが単一の統一されたチェーン「Unichain」のように扱うことができます。各ブロックチェーンの状態を反映し、取引のトリガーやモニタリング機能を提供します。

目的

	•	各種ブロックチェーンの反射とリアルタイムモニタリング
	•	取引のシミュレーションと、実際のブロックチェーンへの取引トリガー
	•	ユーザーにとっての統一されたチェーンインターフェースの提供

2. 機能要件

2.1 基本機能

	1.	ブロックチェーンの反射:
	•	各ブロックチェーンの状態をリアルタイムで取得し、反映（ミラーリング）する機能。
	•	ビットコイン、イーサリアム、ソラナなど主要なブロックチェーンに対応。
	2.	取引のシミュレーション:
	•	各反射チェーン内で取引をシミュレーションする機能。
	•	ユーザーが取引の結果を予測し、リスクを最小限に抑えることができる。
	3.	取引のトリガー:
	•	Raの反射インターフェースから、実際のブロックチェーンに対して取引をトリガーできる機能。
	•	支払い、スマートコントラクトの実行などの取引を含む。
	4.	統一インターフェース（Unichain）:
	•	複数のブロックチェーンを「Unichain」として抽象化し、ユーザーに単一のチェーンのように感じさせるインターフェース。
	•	Flutterを使ったUI、Node.jsと連携して動作。

2.2 ユーザー機能

	1.	アカウント作成と管理:
	•	ユーザーがアカウントを作成し、管理できる機能。
	•	認証と認可機能（例: JWT）を通じて、セキュアなアクセスを提供。
	2.	取引履歴の確認:
	•	ユーザーが自分の取引履歴やステータスを確認できる機能。
	•	反射チェーンでの取引シミュレーション結果も含む。
	3.	リアルタイムモニタリング:
	•	各ブロックチェーンの状態をリアルタイムでモニタリングし、取引履歴やチェーン状況を即時に確認できる機能。

2.3 管理機能

	1.	ブロックチェーン接続管理:
	•	新しいブロックチェーンの追加、既存チェーンの削除や更新を行う機能。
	•	各ブロックチェーンへの接続状態をモニタリングし、接続失敗時のリトライや通知。
	2.	セキュリティ管理:
	•	APIの認証と認可の管理。
	•	取引時に必要な秘密鍵や証明書の安全な保管と利用。
	•	ログイン失敗時のブロック機能、ログの記録などのセキュリティ対策。
	3.	エラー処理と通知機能:
	•	システムエラーや接続失敗の際に管理者へ通知。
	•	取引の失敗や異常検知時にユーザーへリアルタイムで通知。

3. 非機能要件

3.1 パフォーマンス

	•	同時に1000リクエスト以上を処理できるパフォーマンス。
	•	各ブロックチェーンの反射は、10秒以内に最新の状態を取得することを目指す。

3.2 セキュリティ

	•	API認証、データの暗号化、秘密鍵の安全な保管。
	•	ユーザー認証にはJWTを使用し、認可を確実に行う。

3.3 拡張性

	•	将来的に他のブロックチェーンを簡単に追加できるモジュール設計。
	•	必要に応じて、複数のサーバーを横に拡張してスケールさせる設計。

3.4 信頼性

	•	高可用性を確保し、99.9%以上の稼働率を目指す。
	•	エラー時の自動リカバリ、ログ管理とモニタリング機能の実装。

4. システム構成

4.1 フロントエンド

	•	技術スタック: Flutter + Node.js
	•	Flutterでクロスプラットフォーム対応のモバイルアプリを提供。
	•	Node.jsでAPIゲートウェイと認証管理を行う。

4.2 バックエンド

	•	技術スタック: Go
	•	ブロックチェーンの反射やトリガー、データのリアルタイム処理をGoで実装。
	•	gRPCとWebSocketで各ブロックチェーンとの通信を行う。

4.3 データベース

	•	選択肢: PostgreSQL または MongoDB
	•	取引履歴やユーザー設定、各チェーンの状態データを保持。

5. API 要件

5.1 エンドポイント例

	1.	GET /status: RaのAPIが稼働中か確認するためのステータスチェック。
	2.	POST /transaction: 特定のチェーンで取引をトリガーするためのエンドポイント。
	3.	GET /transactions/{user_id}: 特定ユーザーの取引履歴を取得。
	4.	POST /login: ユーザー認証用。

5.2 API認証

	•	JWTを用いたトークンベースの認証を採用。

6. 開発およびデプロイ環境

6.1 開発環境

	•	開発はローカルおよびDocker上で行い、GitHub上でソース管理。
	•	CI/CDツールで自動テストとデプロイメントの自動化。

6.2 本番環境

	•	デプロイメント先：AWS、GCP、またはオンプレミスのサーバー環境。
	•	コンテナ化（Docker）とオーケストレーションツール（Kubernetes）で本番環境のスケーラビリティと信頼性を確保。

7. 今後の拡張

	•	他のブロックチェーンの対応: 継続的に新しいブロックチェーンを追加。
	•	トークンエコシステムの構築: ユーザーが特定のアクティビティに基づいて報酬を得られる仕組み。
	•	高度な取引分析: 反射チェーンのデータを用いた取引分析機能の強化。
